// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package entity

import (
	"net/url"
	"strconv"
)

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

type CursorPaginationInput struct {
	First  *int      `json:"first"`
	After  *string   `json:"after"`
	Last   *int      `json:"last"`
	Before *string   `json:"before"`
	SortBy []*string `json:"sortBy"`
}

type PagePaginationInput struct {
	SortBy []*string `json:"sortBy"`
	Limit  *int      `json:"limit"`
	Page   *int      `json:"page"`
}

type Pagination struct {
	CurrentPage     *int      `json:"current_page"`
	CurrentElements *int      `json:"current_elements"`
	TotalPages      *int      `json:"total_pages"`
	TotalElements   *int      `json:"total_elements"`
	SortBy          *[]string `json:"sort_by,omitempty"`
	CursorStart     *string   `json:"cursor_start,omitempty"`
	CursorEnd       *string   `json:"cursor_end,omitempty"`
}

func (p *PagePaginationInput) DecodeParam(param url.Values) url.Values {
	if p != nil {
		if p.SortBy != nil {
			for _, s := range p.SortBy {
				if s != nil {
					param.Add("sort_by", *s)
				}
			}
		}

		if p.Limit != nil {
			param.Set("limit", strconv.FormatInt(int64(*p.Limit), 10))
		}

		if p.Page != nil {
			param.Set("page", strconv.FormatInt(int64(*p.Page), 10))
		}
	}

	return param
}

func (p *CursorPaginationInput) DecodeParam(param url.Values) url.Values {
	if p.SortBy != nil {
		for _, s := range p.SortBy {
			if s != nil {
				param.Add("sort_by", *s)
			}
		}
	}
	if p.First != nil {
		param.Set("cur_first", strconv.FormatInt(int64(*p.First), 10))
	}
	if p.Last != nil {
		param.Set("cur_last", strconv.FormatInt(int64(*p.Last), 10))
	}
	if p.After != nil {
		param.Set("cur_after", *p.After)
	}
	if p.Before != nil {
		param.Set("cur_before", *p.Before)
	}

	return param
}
